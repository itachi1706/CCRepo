-- PneumaticCraft Air Pressure in tube Regulator Program

-- Requirements
-- 4x3 Advanced Monitor (4 tall, 3 wide)
-- 1 Advanced Computer running this code
-- Bundled cable, with red pointing to low pressure and white pointing to high pressure
-- Left Side is for High Pressure
-- Right Side of computer is Low Pressure
-- Network cable connecting to the monitor
-- Right Side is for Low Pressure

-- Initialize Sides
monitor = peripheral.find("monitor")
priTube = peripheral.wrap("right")
secTube = peripheral.wrap("left")
highPressureActive = false
isBundledCable = true

-- Local Variables
-- Low Pressure (Tier 1) (4.5 bars)
safevalLow = 4.5
releasevalLow = false
valLow = 0
truePressureLow = 0

-- High Pressure (Tier 2)
safevalHigh = 9
releasevalHigh = false
valHigh = 0
truePressureHigh = 0

-- Color values
redColor = colors.red
whiteColor = colors.white
bothColor = colors.red + colors.white

-- Rounds number to a specific decimal point for printing
function round(number, decimal)
  local multiplier = 10^(decimal or 0)
  return math.floor(number * multiplier + 0.5) / multiplier
end

-- Line 1-8 is Low (1-4 is title)
-- Line 10-17 is High  (10-13 is title)

-- ============================
--   Low Air Pressure Status
-- ============================
-- Status: Active/Inactive

-- ============================
--   High Air Pressure Status
-- ============================
-- Status: Active/Inactive

function printTitleOnMonitor(status)
  if status == "Low" then
    monitor.setCursorPos(1, 1)
    monitor.setTextColor(colors.magenta)
    monitor.write("============================")
    monitor.setCursorPos(1, 2)
    monitor.setTextColor(colors.magenta)
    monitor.write("  Low Air Pressure Status")
    monitor.setCursorPos(1, 3)
    monitor.setTextColor(colors.magenta)
    monitor.write("============================")
    monitor.setCursorPos(1, 4)
    monitor.setTextColor(colors.white)
    monitor.write("Status: ")
    if (peripheral.isPresent("right")) then
      monitor.setTextColor(colors.green)
      monitor.write("Active")
    else
      monitor.setTextColor(colors.red)
      monitor.write("Inactive")
    end
  else
    monitor.setCursorPos(1, 10)
    monitor.setTextColor(colors.magenta)
    monitor.write("============================")
    monitor.setCursorPos(1, 11)
    monitor.setTextColor(colors.magenta)
    monitor.write("  High Air Pressure Status")
    monitor.setCursorPos(1, 12)
    monitor.setTextColor(colors.magenta)
    monitor.write("============================")
    monitor.setCursorPos(1, 13)
    monitor.setTextColor(colors.white)
    monitor.write("Status: ")
    if (peripheral.isPresent("left")) then
      monitor.setTextColor(colors.green)
      monitor.write("Active")
    else
      monitor.setTextColor(colors.red)
      monitor.write("Inactive")
    end
  end
end

-- Prints data on monitor for Low pressure
function printOnMonitorLow()
  printTitleOnMonitor("Low")
  monitor.setCursorPos(1,5)
  monitor.setTextColor(colors.white)
  monitor.write("Air Pressure: ")
  monitor.setTextColor(colors.cyan)
  monitor.write(round(truePressureLow,4))
  monitor.setCursorPos(1,6)
  monitor.setTextColor(colors.white)
  monitor.write("Status: ")
  if releasevalLowLow then
    monitor.setTextColor(colors.red)
    monitor.write("Unsafe - Releasing")
    monitor.setCursorPos(1,7)
    monitor.write("Air Pressure")
  else
    monitor.setTextColor(colors.green)
    monitor.write("Safe Levels")
  end
  monitor.setCursorPos(1,8)
  monitor.setTextColor(colors.white)
  monitor.write("Air Pressure Threshold: ")    
  monitor.setTextColor(colors.orange)
  monitor.write(safevalLow)
end

-- Prints data on monitor for High pressure
function printOnMonitorHigh()
  printTitleOnMonitor("High")
  monitor.setCursorPos(1,14)
  monitor.setTextColor(colors.white)
  monitor.write("Air Pressure: ")
  monitor.setTextColor(colors.cyan)
  monitor.write(round(truePressureHigh,4))
  monitor.setCursorPos(1,15)
  monitor.setTextColor(colors.white)
  monitor.write("Status: ")
  if releasevalHigh then
    monitor.setTextColor(colors.red)
    monitor.write("Unsafe - Releasing")
    monitor.setCursorPos(1,16)
    monitor.write("Air Pressure")
  else
    monitor.setTextColor(colors.green)
    monitor.write("Safe Levels")
  end
  monitor.setCursorPos(1,17)
  monitor.setTextColor(colors.white)
  monitor.write("Air Pressure Threshold: ")    
  monitor.setTextColor(colors.orange)
  monitor.write(safevalHigh)
end

-- Data Gathering

-- If colored cables for Low Pressure
function colorLow()
  truePressureLow = priTube.getPressure()
  print("Low Pressure: "..truePressureLow)
  if truePressureLow >= safevalLow and rs.getBundledOutput("bottom") == 0 then
    print("Low Overflow Air Pressure. Releasing...")
    if rs.getBundledOutput("bottom") == whiteColor then
      -- White is already active, enable both
      rs.setBundledOutput("bottom", bothColor)
    else
      -- Enable Red
      rs.setBundledOutput("bottom", redColor)
    end
    relesevalLow = true
  elseif rs.getBundledOutput("bottom") == bothColor or rs.getBundledOutput("bottom") == redColor then
    print("Low Air Pressure back to reasonable levels. Stop Releasing...")
    if rs.getBundledOutput("bottom") == bothColor then
      -- Disable Red but keep white on
      rs.setBundledOutput("bottom", whiteColor)
    else
      -- Disable red
      rs.setBundledOutput("bottom", 0)
    end
    releasevalLow = false
  end
end

-- If colored cables for High Pressure
function colorHigh()
  truePressureHigh = secTube.getPressure()
  print("High Pressure: "..truePressureHigh)
  if truePressureHigh >= safevalHigh and rs.getBundledOutput("bottom") == 0 then
    print("High Overflow Air Pressure. Releasing...")
    if rs.getBundledOutput("bottom") == redColor then
      -- Red is already active, enable both
      rs.setBundledOutput("bottom", bothColor)
    else
      -- Enable White
      rs.setBundledOutput("bottom", whiteColor)
    end
    relesevalHigh = true
  elseif rs.getBundledOutput("bottom") == bothColor or rs.getBundledOutput("bottom") == whiteColor then
    print("High Air Pressure back to reasonable levels. Stop Releasing...")
    if rs.getBundledOutput("bottom") == bothColor then
      -- Disable White but keep red on
      rs.setBundledOutput("bottom", redColor)
    else
      -- Disable white
      rs.setBundledOutput("bottom", 0)
    end
    releasevalHigh = false
  end
end

-- If non colored cables for Low Pressure (Legacy Method)
function nonColorLow()
  truePressureLow = priTube.getPressure()
  print("Low Pressure: "..truePressureLow)
  if truePressureLow >= safevalLow and not rs.getOutput("bottom") then
    print("Low Overflow Air Pressure. Releasing...")
    rs.setOutput("bottom", true)
    relesevalLow = true
  elseif rs.getOutput("bottom") then
    print("Low Air Pressure back to reasonable levels. Stop Releasing...")
    rs.setOutput("bottom", false)
    releasevalLow = false
  end
end

-- If non colored cables for High Pressure (Legacy Method)
function nonColorHigh()
  truePressureHigh = secTube.getPressure()
  print("High Pressure: "..truePressureHigh)
  if valHigh >= safevalHigh and not rs.getOutput("bottom") then
    print("Overflow High Air Pressure. Releasing...")
    rs.setOutput("bottom", true)
    relesevalHigh = true
  elseif rs.getOutput("bottom") then
    print("High Air Pressure back to reasonable levels. Stop Releasing...")
    rs.setOutput("bottom", false)
    releasevalHigh = false
  end
end

while true do
  if not isBundledCable then
    nonColorLow()
    if highPressureActive then
      nonColorHigh()
    end
  else
    colorLow()
    if highPressureActive then
      colorHigh()
    end
  end
  if monitor then
    monitor.clear()
    printOnMonitorLow()
    printOnMonitorHigh()
  end
  sleep(1)
end